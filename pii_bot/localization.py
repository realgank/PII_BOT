"""Localization and translation helpers for the PII bot."""

from __future__ import annotations

import asyncio
import json
import logging
import re
import threading
from collections import OrderedDict
from string import Formatter
from typing import Dict, List, Optional, Tuple

logger = logging.getLogger(__name__)

# ==================== –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø ====================
SUPPORTED_LANGUAGES: "OrderedDict[str, Dict[str, str]]" = OrderedDict(
    {
        "ru": {"name": "–†—É—Å—Å–∫–∏–π", "emoji": "üá∑üá∫"},
        "en": {"name": "English", "emoji": "üá¨üáß"},
    }
)
DEFAULT_LANGUAGE = "ru"

TRANSLATIONS: Dict[str, Dict[str, str]] = {
    "admin_required": {
        "ru": "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
        "en": "Server administrator permissions are required.",
    },
    "amount_non_negative": {
        "ru": "amount –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 0.",
        "en": "`amount` must be greater than or equal to 0.",
    },
    "cannot_determine_channel": {
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "en": "Failed to determine the channel to send the message to.",
    },
    "cannot_determine_permissions": {
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
        "en": "Could not determine the bot permissions on the server. Make sure the bot is added to the server.",
    },
    "channel_same_server_only": {
        "ru": "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.",
        "en": "You can only choose a channel from this server.",
    },
    "command_admin_only": {
        "ru": "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞.",
        "en": "‚õî This command is only available to server administrators.",
    },
    "command_server_only": {
        "ru": "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ä–≤–µ—Ä–µ.",
        "en": "This command can only be used inside a server.",
    },
    "csv_prices_required": {
        "ru": "–ü–µ—Ä–µ–¥–∞–π csv_prices: `resource,price` –ø–æ—Å—Ç—Ä–æ—á–Ω–æ.",
        "en": "Provide `csv_prices` as lines in the `resource,price` format.",
    },
    "delete_owner_or_admin": {
        "ru": "‚õî –£–¥–∞–ª—è—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü POS –∏–ª–∏ –∞–¥–º–∏–Ω —Å–µ—Ä–≤–µ—Ä–∞.",
        "en": "‚õî Only the POS owner or a server admin can delete it.",
    },
    "drills_not_int": {
        "ru": "`drills` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.",
        "en": "`drills` must be an integer.",
    },
    "error_generic": {
        "ru": "–û—à–∏–±–∫–∞: {error}",
        "en": "Error: {error}",
    },
    "import_data_required": {
        "ru": "–í—Å—Ç–∞–≤—å —Ç–∞–±–ª–∏—Ü—É –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä `data` (TSV/CSV –∏–ª–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π).",
        "en": "Paste the table into the `data` parameter (TSV/CSV or a single line).",
    },
    "imported_count": {
        "ru": "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: **{count}**.",
        "en": "Imported: **{count}**.",
    },
    "language_changed": {
        "ru": "–Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {language_emoji} {language_name}.",
        "en": "Language updated to {language_emoji} {language_name}.",
    },
    "language_current": {
        "ru": "–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {language_emoji} {language_name}.",
        "en": "Current language: {language_emoji} {language_name}.",
    },
    "language_invalid": {
        "ru": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫.",
        "en": "Unknown language.",
    },
    "language_options": {
        "ru": "–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {languages}.",
        "en": "Available languages: {languages}.",
    },
    "language_usage": {
        "ru": "–ò—Å–ø–æ–ª—å–∑—É–π `/language <ru|en>` –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞.",
        "en": "Use `/language <ru|en>` to change the language.",
    },
    "list_too_long": {
        "ru": "üìÑ {title}: —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø—Ä–∏–ª–æ–∂–∏–ª —Ñ–∞–π–ª–æ–º.",
        "en": "üìÑ {title}: the list is too large, attached as a file.",
    },
    "logs_channel_set": {
        "ru": "‚úÖ –õ–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {channel}.",
        "en": "‚úÖ Logs will be sent to {channel}.",
    },
    "missing_permissions": {
        "ru": "‚õî –£ –±–æ—Ç–∞ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ: {permissions}.",
        "en": "‚õî The bot lacks the required permissions to send a reminder in this channel: {permissions}.",
    },
    "no_active_reminders": {
        "ru": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç.",
        "en": "There are no active reminders to report to.",
    },
    "no_assigned_planets": {
        "ru": "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.",
        "en": "You have no assigned planets on this server.",
    },
    "no_data_period": {
        "ru": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–∞—á–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
        "en": "No resource submissions for the selected period.",
    },
    "no_pos": {
        "ru": "POS-–æ–≤ –Ω–µ—Ç.",
        "en": "No POS found.",
    },
    "no_pos_assignments": {
        "ru": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–π POS –ø–æ–∫–∞ –Ω–µ—Ç.",
        "en": "No POS assignments yet.",
    },
    "no_pos_in_server_for_user": {
        "ru": "–î–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —É —Ç–µ–±—è –Ω–µ—Ç POS.",
        "en": "You have no POS on this server.",
    },
    "no_pos_on_server": {
        "ru": "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—â—ë –Ω–µ—Ç POS.",
        "en": "There are no POS on the server yet.",
    },
    "no_pos_to_update": {
        "ru": "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç POS –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
        "en": "There are no POS to update on this server.",
    },
    "not_enough_data_period": {
        "ru": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–∞—á–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
        "en": "Not enough resource submission data for the selected period.",
    },
    "parse_failed": {
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–ª–æ–Ω–∫–∏/—Ñ–æ—Ä–º–∞—Ç.",
        "en": "Failed to parse the data. Check the columns/format.",
    },
    "pos_belongs_other": {
        "ru": "‚õî –≠—Ç–æ—Ç POS –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
        "en": "‚õî This POS belongs to another user.",
    },
    "pos_deleted": {
        "ru": "üóëÔ∏è POS **{name}** —É–¥–∞–ª—ë–Ω.",
        "en": "üóëÔ∏è POS **{name}** has been deleted.",
    },
    "pos_deleted_count": {
        "ru": "üßπ –£–¥–∞–ª–µ–Ω–æ POS-–æ–≤: **{count}**.",
        "en": "üßπ POS deleted: **{count}**.",
    },
    "pos_not_found": {
        "ru": "POS –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "en": "POS not found.",
    },
    "pos_not_found_deleted": {
        "ru": "POS –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª—ë–Ω).",
        "en": "POS not found (possibly deleted).",
    },
    "pos_not_found_or_not_owned": {
        "ru": "POS –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
        "en": "POS not found or belongs to another user.",
    },
    "positions_imported": {
        "ru": "‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: **{processed}/{total}** (—Å —Ü–µ–Ω–æ–π: **{priced}**).",
        "en": "‚úÖ Imported positions: **{processed}/{total}** (with price: **{priced}**).",
    },
    "prices_not_set": {
        "ru": "–¶–µ–Ω—ã –Ω–µ –∑–∞–¥–∞–Ω—ã.",
        "en": "No prices configured.",
    },
    "reminder_closed": {
        "ru": "–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ.",
        "en": "This reminder is already closed.",
    },
    "reminder_not_available": {
        "ru": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ.",
        "en": "The reminder is no longer available.",
    },
    "reminder_not_found": {
        "ru": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
        "en": "Reminder not found.",
    },
    "reminder_not_found_id": {
        "ru": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.",
        "en": "A reminder with this ID was not found on this server.",
    },
    "reminder_other_server": {
        "ru": "–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥—Ä—É–≥–æ–º—É —Å–µ—Ä–≤–µ—Ä—É.",
        "en": "This reminder belongs to another server.",
    },
    "reminder_text_empty": {
        "ru": "–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
        "en": "Reminder text must not be empty.",
    },
    "reminder_text_too_long": {
        "ru": "–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤).",
        "en": "Reminder text is too long (maximum 2000 characters).",
    },
    "resource_price_required": {
        "ru": "–ù—É–∂–Ω–æ resource –∏ price.",
        "en": "`resource` and `price` are required.",
    },
    "save_submission_error": {
        "ru": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
        "en": "Failed to save the submission. Please try again later.",
    },
    "send_failed": {
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {error}",
        "en": "Failed to send the message: {error}",
    },
    "server_only_short": {
        "ru": "–¢–æ–ª—å–∫–æ –≤ —Å–µ—Ä–≤–µ—Ä–µ.",
        "en": "Server only.",
    },
    "slots_not_int": {
        "ru": "`slots` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.",
        "en": "`slots` must be an integer.",
    },
    "specify_log_channel": {
        "ru": "–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤.",
        "en": "Specify a server text channel for logs.",
    },
    "system_not_found": {
        "ru": "–°–∏—Å—Ç–µ–º–∞ **{system}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.",
        "en": "System **{system}** not found in the database.",
    },
    "target_not_set": {
        "ru": "–î–ª—è **{resource}** —Ü–µ–ª—å –Ω–µ –∑–∞–¥–∞–Ω–∞.",
        "en": "No target is configured for **{resource}**.",
    },
    "targets_deleted": {
        "ru": "–£–¥–∞–ª–µ–Ω–æ —Ü–µ–ª–µ–π: **{count}**.",
        "en": "Targets removed: **{count}**.",
    },
    "unknown_action": {
        "ru": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        "en": "Unknown action.",
    },
    "update_error": {
        "ru": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {error}",
        "en": "Update failed: {error}",
    },
    "update_owner_only": {
        "ru": "‚õî –û—Ç–º–µ—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü POS.",
        "en": "‚õî Only the POS owner can acknowledge the update.",
    },
    "user_has_no_pos": {
        "ru": "–£ {user} –Ω–µ—Ç POS-–æ–≤.",
        "en": "{user} has no POS.",
    },
    "warehouse_cleared": {
        "ru": "üßπ –û—á–∏—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å–∫–ª–∞–¥–∞: **{count}**.",
        "en": "üßπ Warehouse entries cleared: **{count}**.",
    },
    "warehouse_empty": {
        "ru": "–°–∫–ª–∞–¥ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π `/have import`.",
        "en": "Warehouse is empty. Use `/have import`.",
    },
    "you_have_no_pos": {
        "ru": "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç POS-–æ–≤.",
        "en": "You don't have any POS yet.",
    },
    "ok_price": {
        "ru": "OK: **{resource}** = **{price} ISK/–µ–¥**",
        "en": "OK: **{resource}** = **{price} ISK/unit**",
    },
    "quantity_negative": {
        "ru": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü—Ä–æ–≤–µ—Ä—å: {line}.",
        "en": "Quantity cannot be negative. Check: {line}.",
    },
    "only_text_channels": {
        "ru": "–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∏ —Ç—Ä–µ–¥—ã.",
        "en": "Only text channels and threads are supported.",
    },
}


def normalize_language(language: Optional[str]) -> str:
    if not language:
        return DEFAULT_LANGUAGE
    language = language.lower()
    return language if language in SUPPORTED_LANGUAGES else DEFAULT_LANGUAGE


class TemplateTranslation:
    __slots__ = ("template_ru", "translations", "pattern", "formatter")

    def __init__(self, template_ru: str, translations: Dict[str, str]):
        self.template_ru = template_ru
        self.translations = translations
        self.formatter = Formatter()
        self.pattern = self._build_pattern(template_ru)

    def _build_pattern(self, template: str) -> re.Pattern[str]:
        parsed = list(self.formatter.parse(template))
        parts: List[str] = ["^"]
        seen_fields: Dict[str, str] = {}
        total = len(parsed)
        for idx, (literal, field_name, _format_spec, _conversion) in enumerate(parsed):
            if literal:
                parts.append(re.escape(literal))
            if field_name is None:
                continue
            key = field_name or f"field_{idx}"
            if key in seen_fields:
                parts.append(f"(?P={key})")
                continue
            seen_fields[key] = key
            remaining_literals = any(lit for lit, _, _, _ in parsed[idx + 1 :])
            quantifier = ".*" if not remaining_literals else ".*?"
            parts.append(f"(?P<{key}>{quantifier})")
        parts.append("$")
        return re.compile("".join(parts), re.DOTALL)

    def try_translate(self, text: str, language: str) -> Optional[str]:
        if language == DEFAULT_LANGUAGE:
            return text
        template_target = self.translations.get(language)
        if not template_target:
            return None
        match = self.pattern.fullmatch(text)
        if not match:
            return None
        groups = match.groupdict()
        try:
            return template_target.format(**groups)
        except Exception:
            return template_target


_template_translations: List[TemplateTranslation] = [
    TemplateTranslation(data["ru"], data)
    for data in TRANSLATIONS.values()
    if data.get("ru") and any(lang != DEFAULT_LANGUAGE for lang in data)
]

_machine_translation_cache: Dict[Tuple[str, str], str] = {}
_machine_translation_lock = threading.Lock()
_user_language_cache: Dict[int, str] = {}
_token_language_cache: Dict[str, str] = {}


def _contains_cyrillic(text: str) -> bool:
    return any("–∞" <= ch.lower() <= "—è" or ch in "—ë–Å" for ch in text)


def _run_machine_translation(text: str) -> str:
    from urllib import parse, request

    url = (
        "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=en&dt=t&q="
        + parse.quote(text)
    )
    with request.urlopen(url, timeout=5) as resp:
        data = json.loads(resp.read().decode("utf-8"))
    return "".join(part[0] for part in data[0])


async def machine_translate_text(text: str, language: str) -> str:
    key = (text, language)
    with _machine_translation_lock:
        cached = _machine_translation_cache.get(key)
    if cached is not None:
        return cached

    translated = text
    if language == "en" and text:
        try:
            loop = None
            try:
                loop = asyncio.get_running_loop()
            except RuntimeError:
                loop = None
            if loop and loop.is_running():
                translated = await loop.run_in_executor(None, _run_machine_translation, text)
            else:
                translated = _run_machine_translation(text)
        except Exception as exc:
            logger.debug("Machine translation failed for %s: %s", text[:60], exc)

    with _machine_translation_lock:
        _machine_translation_cache[key] = translated
    return translated


async def translate_text(text: Optional[str], language: str) -> Optional[str]:
    if not text or language == DEFAULT_LANGUAGE:
        return text
    if not isinstance(text, str):
        return text
    if not _contains_cyrillic(text):
        return text

    for tpl in _template_translations:
        result = tpl.try_translate(text, language)
        if result is not None and result != text:
            return result
    return await machine_translate_text(text, language)


def translate_for_language(language: str, key: str, **kwargs) -> str:
    entry = TRANSLATIONS.get(key, {})
    template = entry.get(language) or entry.get(DEFAULT_LANGUAGE) or ""
    return template.format(**kwargs)


__all__ = [
    "DEFAULT_LANGUAGE",
    "SUPPORTED_LANGUAGES",
    "TRANSLATIONS",
    "TemplateTranslation",
    "normalize_language",
    "machine_translate_text",
    "translate_for_language",
    "translate_text",
]

